package appwatch;

/*
 * Copyright (c) 2017 David Harrop
 */


import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This UI Class prompts the user to enter the password previously used
 * to encrypt the Hash File or, if no Hash File exists, to supply and confirm
 * a new password
 * @author David Harrop
 */
public class PasswordUI extends javax.swing.JDialog {
    private static String action;
    public static String key;
    
    /**
     * present the password box and enable the appropriate field(s) depending
     * upon the action [new | existing] being performed.
     * @param parent Dialog from which this dialog was called
     * @param modal Flag that informs the application to display this Dialog in front
     * @param action Indicates New or Existing password being entered by user
     */
    @SuppressWarnings("OverridableMethodCallInConstructor")
    public PasswordUI(java.awt.Frame parent, boolean modal, String action) {
        super(parent, modal);
        PasswordUI.action = action;
        initComponents();          
        setLocationRelativeTo(null);  //central position
        getRootPane().setDefaultButton(jButton1);
        jButton1.setEnabled(false);
        jPasswordField2.setEnabled(false);
        jLabel2.setVisible(false);        
        jPasswordField2.setVisible(false);
                
        System.out.println("psUI: Action = " + action);
        if (PasswordUI.action.equals("new")) {
            jPasswordField1.setToolTipText("Enter and confirm a password to be used to encrypt the control file." + 
                    (char) 10 + "This file assures the integrity of the data we provide you.  Don't forget it!");
        } else {
            jPasswordField1.setToolTipText("What password did you set the first time you opened AppWatch?");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jPasswordField2 = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        pwErrorLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jScrollPane2.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(380, 140));

        jPasswordField1.setToolTipText("");
        jPasswordField1.setMinimumSize(new java.awt.Dimension(111, 20));
        jPasswordField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPasswordField1KeyReleased(evt);
            }
        });

        jLabel1.setText("Enter password:");

        jPasswordField2.setMinimumSize(new java.awt.Dimension(111, 20));
        jPasswordField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPasswordField2KeyReleased(evt);
            }
        });

        jLabel2.setText("Confirm password:");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        pwErrorLabel.setForeground(new java.awt.Color(255, 0, 0));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("?");
        jLabel3.setToolTipText("Passwords must:" + (char) 10 + "Be at least 8 characters long" + (char) 10 + "Contain at least one UPPERCASE character" + (char) 10 + "Contain at least one lowercase character" + (char) 10 + "Contain at least one special character ~!@#$%^&*()_-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(123, 123, 123))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPasswordField2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addComponent(pwErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pwErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The OK button, sets the class return value to the password entered by
     * the user
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);
        dispose();
        String passcode = new String(jPasswordField1.getPassword());
        PasswordUI.key = passcode;
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * After each key release, validate the entered password against the rules
     * we have configured in the verifyPasswords method.
     * @param evt 
     */
    private void jPasswordField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordField1KeyReleased
        
        if (PasswordUI.action.equals("existing")) {
            jButton1.setEnabled(true);
        } else {
            if(verifyPasswords()){
                //it's good, display the confirm box as this is a new password
                System.out.println("psUI: passwords verified");
                jLabel2.setVisible(true); 
                jPasswordField2.setVisible(true);             
            } else {
                System.out.println("psUI: passwords NOT verified");
            } 
        }
    }//GEN-LAST:event_jPasswordField1KeyReleased

    /**
     * After each key release in the Confirm box, verify that the second password
     * matches the first.  do not enable the OK button until they do.
     * @param evt 
     */
    private void jPasswordField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordField2KeyReleased
        if(verifyPasswords()){
            jButton1.setEnabled(true);
        } else {
            jButton1.setEnabled(false);
        }
    }//GEN-LAST:event_jPasswordField2KeyReleased

    /**
     * This method was copied from Secure Programming CA3 submitted by 
     * David Harrop (03298051) and Krzysztof Pawlik (16138147).
     * It checks the entered first password against the rules we have defined.
     * It also checks the entered second password against the first.
     * @return true [password(s) OK] or false [some problem detected]
     */
    public boolean verifyPasswords() {
        /**
         * First, confirm that the first password is 8 or more characters
         * if yes, then check each character in the password to ensure that 
         * the minimum requirements are met.
         * If it passes, then present the 2nd password field and compare that to
         * 1st password after each key press.
        */
        char password1[]=jPasswordField1.getPassword();
        char password2[]=jPasswordField2.getPassword();
        boolean upper = false;
	boolean lower = false;
	boolean digit = false;
	boolean symbol = false;
        
        System.out.println("psUI: checking length");
        if(password1.length<8){
            pwErrorLabel.setText("Password must be at least 8 characters");
            pwErrorLabel.setVisible(true);
            return false;
        }
        
        if (action.equals("new")) {
            if(password1.length>7){
                pwErrorLabel.setVisible(false);
                System.out.println("psUI: confirming password");
                if(password1.length==password2.length){
                    pwErrorLabel.setVisible(false);
                    if(Arrays.equals(password1, password2)){
                        return true;                        
                    }
                }
                pwErrorLabel.setText("Passwords do not match");
                pwErrorLabel.setVisible(true);
            }
        }       

    	for (char ch : password1) {
            if (Character.isUpperCase(ch)) {
                upper = true;
                System.out.println("psUI: found upper");
            } else if (Character.isLowerCase(ch)) {
                lower = true;
                System.out.println("psUI: found lower");
            } else if (Character.isDigit(ch)) {
                digit = true;
                System.out.println("psUI: found digit");
            } else if(!Character.isLetterOrDigit(ch)){ 
                symbol = true;
                System.out.println("psUI: found symbol");
            } 
        }
        if (upper = true && lower == true && digit == true && symbol == true) {
            if (PasswordUI.action.equals("new")) {
                System.out.println("psUI: enable second pw field");
                jLabel2.setEnabled(true);
                jPasswordField2.setEnabled(true);
            }            
            return true;
        } else {
            pwErrorLabel.setText("Password does not meet requirements");
            pwErrorLabel.setVisible(true);
        }
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(PasswordUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        /* Create and display the form 
        java.awt.EventQueue.invokeLater(() -> {
            new PasswordUI(action).setVisible(true);
        });
        */
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                PasswordUI dialog = new PasswordUI(new javax.swing.JFrame(), true, action);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel pwErrorLabel;
    // End of variables declaration//GEN-END:variables
}
