package appwatch;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.*;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.InvalidParameterSpecException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.*;
import javax.swing.table.*;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/**
 *
 * @author David Harrop
 */
public class homePage extends javax.swing.JDialog {
    powerShellClass ps; 
    reportClass rep;
    DefaultTableModel model;
    hashListClass hash;
    passwordUI psUI;
    String dir;
    String file;
    String filename;
    boolean hashExists;
    boolean encExists;

    /**
     *
     */
    public String key;
    
    /**
     * Creates new form homePage
     * @param parent
     * @param modal
     */
    @SuppressWarnings("OverridableMethodCallInConstructor")
    public homePage(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        //this.model = (DefaultTableModel) reportTable.getModel();
        initComponents();   
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jStatusLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setSize(new java.awt.Dimension(642, 394));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        reportTable.setAutoCreateRowSorter(true);
        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Date", "Report ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reportTable.setShowVerticalLines(false);
        reportTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(reportTable);

        jLabel1.setText("AppWatch default directory:");
        jLabel1.setFocusable(false);
        jLabel1.setInheritsPopupMenu(false);
        jLabel1.setOpaque(true);
        jLabel1.setRequestFocusEnabled(false);

        jMenu3.setText("Action");
        jMenu3.setName("actionMenu"); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("New Application Scan");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setLabel("Open highlighted report");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 18, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(jStatusLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /*
    * When AppWatch is opened, check to see if the default application
    * directory exists.  If it does not, create it        
    */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setTitle("AppWatch");
        jLabel2.setText("Window open");
        boolean dirFound;
        ps = new powerShellClass();
        hash = new hashListClass();        
                
        dirFound = ps.dirSearch();
        dir = ps.getAppDir();
                
        if (dirFound == false) {
            System.out.println("hP: dirFound = False");
            try {
                powerShellClass.dirMake(dir);
            }
            catch (IOException ex) {
                Logger.getLogger(homePage.class.getName()).log(Level.SEVERE, null, ex); 
            }
        } else {
            /* As the application directory exists, now check to see if the Hash List exists
            ** if it does, then prompt for the password.
            ** If it doesn't, prompt for a new password with confirmation to be used 
            ** in encrypting a new Hash File, which will also have to be created
            */            
            
            filename = "hashlist.xml.enc";
            file = dir + File.separator + filename;
            hashExists = hash.checkHashFileExists(dir, filename);
            
            if (hashExists == false) {
                psUI = new passwordUI(new javax.swing.JFrame(), true, "new");
                psUI.setVisible(true);
                this.key = passwordUI.key;
                try {                    
                    hash.createHashFile();
                } catch (InvalidAlgorithmParameterException | IOException | NoSuchAlgorithmException | InvalidKeySpecException | NoSuchPaddingException | InvalidKeyException | InvalidParameterSpecException ex) {
                    Logger.getLogger(homePage.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                existingHashFile(file);
            } 
        }
        jLabel2.setText(ps.homeDir() + File.separator + "AppWatch");
    }//GEN-LAST:event_formWindowOpened

    private void existingHashFile(String file) {
        psUI = new passwordUI(new javax.swing.JFrame(), true, "existing");
        psUI.setVisible(true);
        this.key = passwordUI.key;
        try {
            hash.decryptHashFile(file, this.key);
        } catch (BadPaddingException ex) {
            //Logger.getLogger(homePage.class.getName()).log(Level.SEVERE, null, ex);
            //then the file was not decrypted
            System.out.println("BadPadding Caught!");
            Object[] buttonOptions = {"Try again", "Create new"};
            int n = JOptionPane.showOptionDialog(null, "I was unable to decrypt the Control File with the supplied password." + (char) 10 + 
                    "It assures your report integrity, therefore I cannot verify the integrity of the existing reports." + (char) 10 +
                    "Try again or create a new Control File?"
                    , "WARNING!", JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,     //do not use a custom Icon
                    buttonOptions,  //the titles of buttons
                    buttonOptions[0]);
            filename = "hashlist.xml.enc";
            file = dir + File.separator + filename;
            if (n == 0) {                
                existingHashFile(file);
            } else {
                File folder;
                folder = new File(dir);
                File[] listOfFiles = folder.listFiles();
        
                for (File delFile : listOfFiles) {
                    if (delFile.isFile()) {
                        //File toDel = new File(delFile);
                        if (delFile.delete()) {
                            JOptionPane.showMessageDialog(null, "Control File and all previous reports successfully deleted.");
                        } 
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(homePage.class.getName()).log(Level.SEVERE, null, ex);
        }
        populateTable(ps.homeDir() + File.separator + "AppWatch");
    }
    
    private void reportTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportTableMouseClicked
        String report_ID;
        String hashVal;
        
        if (evt.getClickCount() == 2) {
            Object o = reportTable.getValueAt(reportTable.getSelectedRow(), 2);
            report_ID = o.toString();
            filename = ps.homeDir() + File.separator + "AppWatch" + File.separator + report_ID + ".xml";
            File xml = new File(filename);
            if (report_ID.equals("")) {
                // a row without a Report ID value has been clicked, can't do anything
                jStatusLabel.setText("Invalid selection");
            } else {
                try {
                    //we have a report ID, now we must open and display the report contents
                     //Verify the MD5 Hash value of the report
                    hashVal = rep.getHash(xml);
                    System.out.println("hashVal = " + hashVal);
                    if (hashVal != null) {
                        boolean validated = rep.validateHash(rep.getUNIDFromFile(filename), hashVal);
                        if (validated == true) {
                            rep.openReport(report_ID);
                        } else {
                            JOptionPane.showMessageDialog(null, "It looks like this report has been modified"
                            + " since AppWatch last saved it.  It should no longer be trusted"
                                    , "WARNING!", JOptionPane.WARNING_MESSAGE);
            }
                    } 
                } catch (ParserConfigurationException | IOException | NoSuchAlgorithmException ex) {
                    Logger.getLogger(homePage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_reportTableMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //protect the hash list from modification whilst AppWatch is closed
        filename = ps.getAppDir() + "hashlist.xml";
        System.out.println("closing, filename = " + filename);
        try {
            hash.encryptHashFile(filename, this.key);
            File delFile = new File(filename);
            System.out.println("deleting " + delFile.getName());
            delFile.delete();
        } catch (Exception ex) {
            Logger.getLogger(homePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        /*
        * The button executes a new scan for locally installed applications.
        * As the scan results are written to the default application directory
        * we must first ensure that the directory exists.  
        * If it does not, then it will be created.
        * Only if the default application directory exists will the scan be
        * initiated.
        */
        boolean dirFound;
        boolean dirMade = true;
        String md5Hash;
        String rID;
        File report;
        ps = new powerShellClass();
        rep = new reportClass();
        System.out.println("menu item clicked!");
        //check to see if the default application directory exists
        dirFound = ps.dirSearch();
       
        if (dirFound == false) {
            try {
                // cannot locate the directory, attempt to create it
                powerShellClass.dirMake(ps.homeDir());
            }
            catch (IOException ex) {
                Logger.getLogger(homePage.class.getName()).log(Level.SEVERE, null, ex); 
                dirMade = false;
            }
        } else {
            jStatusLabel.setText("Found " + ps.homeDir() + File.separator + "AppWatch");
        }
        /* the dirMade variable is true, unless the attempt to create the default
        *  directory has failed.  This means that the application scan cannot be
        *  initiated unless the directory existss
        */
        if (dirMade) {
            jStatusLabel.setText("Scanning for installed applications...");
            try {
                filename = ps.appSearch(); 
                rep.addAppUNIDS(filename);
                report = new File(filename);                
                md5Hash = rep.getHash(report);
                rID = rep.getUNIDFromFile(filename);
                hash.setHash(rID, md5Hash);
                jStatusLabel.setText("Scan complete. Report ID: " + rID);
                populateTable(ps.homeDir() + File.separator + "AppWatch");
            }
            // if the appSearch method throws any exception, return a general error
            catch (IOException | SAXException | NoSuchAlgorithmException ex) {
                Logger.getLogger(homePage.class.getName()).log(Level.SEVERE, null, ex);     
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * Populate the table with a list of all the reports found in the 
     * AppWatch directory.
     * @param dir the directory to find reports in
     * source: https://stackoverflow.com/questions/5924237/java-read-all-txt-files-in-folder
     */
    private void populateTable (String dir) {
        File folder;
        folder = new File(dir);
        File[] listOfFiles = folder.listFiles();
        String rID;
        String rStage;
        Long lastMod;
        Date rDt;
        
        rep = new reportClass();
        model = (DefaultTableModel) reportTable.getModel();
        model.setRowCount(0);

        for (File report : listOfFiles) {
            if (report.isFile() && report.getName().endsWith(".xml") & !report.getName().equalsIgnoreCase("hashlist.xml")) {
                try {
                    //read the report ID, report Stage and populate the table
                    rID = rep.readReport(report, "report_ID");
                    rStage = rep.readReport(report, "report_Stage");
                    lastMod = report.lastModified();
                    rDt = new Date(lastMod);
                    
                    Object[] row = {rStage, rDt, rID};
                    
                    model.addRow(row);
                } catch (SAXException | IOException ex) {
                    Logger.getLogger(homePage.class.getName()).log(Level.SEVERE, null, ex); 
                }                 
            } 
        }
        
        TableColumn column;
        for (int i = 0; i < 3; i++) {
            column = reportTable.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setMinWidth(150); 
            } else if (i == 1) {
                column.setMinWidth(200);
            }
        }
        DefaultTableCellRenderer leftAlign = new DefaultTableCellRenderer();
        leftAlign.setHorizontalAlignment(SwingConstants.LEFT);
        reportTable.getColumnModel().getColumn(1).setCellRenderer(leftAlign);
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(reportTable.getModel());
        reportTable.setRowSorter(sorter);

        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(homePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            homePage dialog = new homePage(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jStatusLabel;
    private javax.swing.JTable reportTable;
    // End of variables declaration//GEN-END:variables
}
