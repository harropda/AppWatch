package appwatch;

/*
 * Copyright (c) 2017 David Harrop
 */

import java.awt.Component;
import java.io.*;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.*;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/**
 * This class represents the first point of contact with the end user.  It 
 * provides two option:
 * 1. Create a new report by initiating an Application Scan
 * 2. Open an existing report
 * @author David Harrop
 */
public class HomePage extends javax.swing.JDialog {
    PowerShellClass ps; 
    ReportClass rep;
    HashListClass hash;
    PasswordUI psUI;    
    EncryptionManager enc;
    DefaultTableModel model;
    String dir;
    String file;
    String filename;
    boolean hashExists;
    boolean encExists;

    /**
     *
     */
    public String key;
    
    /**
     * Creates new form homePage
     * @param parent The Dialog from which this Dialog was called
     * @param modal Flag that informs application to display this Dialog in front
     */
    @SuppressWarnings("OverridableMethodCallInConstructor")
    public HomePage(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        //this.model = (DefaultTableModel) reportTable.getModel();
        initComponents();   
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jStatusLabel = new javax.swing.JLabel();
        delButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setSize(new java.awt.Dimension(642, 394));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        reportTable.setAutoCreateRowSorter(true);
        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Date", "Report ID", "# Apps", "Vuln. Scan Type", "# Vuln."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reportTable.setShowVerticalLines(false);
        reportTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(reportTable);

        jLabel1.setText("AppWatch default directory:");
        jLabel1.setFocusable(false);
        jLabel1.setInheritsPopupMenu(false);
        jLabel1.setOpaque(true);
        jLabel1.setRequestFocusEnabled(false);

        delButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/appwatch/trash-delete.gif"))); // NOI18N
        delButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delButtonMouseClicked(evt);
            }
        });

        jMenu3.setText("Action");
        jMenu3.setName("actionMenu"); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("New Application Scan");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(delButton)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(delButton)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(jStatusLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * 
     * When AppWatch is opened, several  tests need to be performed to ensure that
     * the environment is configured correctly.  Those tests are:
     * 1. check to see if the application directory exists.  If not, create it.
     * 2. check to see if the encrypted Hash List exists
     *   a. if not, prompt the user for a password and create a new Hash List.  The
     *      password will be used to encrypt the new Hash List file.
     *   b. attempt to decrypt the Hash List
     *       i. if decryption fails due to a bad password, ask the user to either
     *          try again or create a new Hash File (this will result in all 
     *          previously created reports being deleted.
     * 3. Find all report files in the application directory and populate the table      
    */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        onOpenDo();
    }//GEN-LAST:event_formWindowOpened

     /**
      * The method that dictates what actions are performed when we open the
      * Home Page for the first time.
      */
    public void onOpenDo() {
        this.setTitle("AppWatch");
        jLabel2.setText("Window open");
        boolean dirFound;
        ps = new PowerShellClass();
        hash = new HashListClass();        
        
        //Search for the application directory
        dirFound = ps.dirSearch();
        dir = ps.getAppDir();
                
        if (dirFound == false) {
            //application directory not found, so we must create ite
            try {
                PowerShellClass.dirMake(dir);
            }
            catch (IOException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex); 
            }
        }
        /* As the application directory now exists, now check to see if the Hash 
        ** List exists. If it does, then prompt for the password.
        ** If it doesn't, prompt for a new password with confirmation to be used 
        ** in encrypting a new Hash File, which will also have to be created
        */            
        
        filename = "hashlist.xml.enc";
        file = dir + filename;
        System.out.println("File: " + file);
        hashExists = hash.checkHashFileExists(dir, filename);

        if (hashExists == false) {
            //there is no encrypted hash File, so one must be created
            //prompt the user for a password to be used in encryption
            psUI = new PasswordUI(new javax.swing.JFrame(), true, "new");
            psUI.setVisible(true);
            this.key = PasswordUI.key;
            //create a new Hash File - this will overwrite any exiting Hash File.
            hash.createHashFile();            
        } else {
            /** loop through attempts to decrypt the Hash File.  If decryption is
             *  OK (eFH = 2), then populate the table.  If not, the user is asked if they
             *  want to try the password again (eHF = 0) or delete all files
             *  and start again (eFH = 1)
             */
            int eHF = 0;
            while (eHF == 0) {                
                filename = "hashlist.xml.enc";
                file = dir + filename;
                eHF = existingHashFile(file);
                if (eHF == 1) {
                    //Create New
                    deleteAllFiles();
                } else if (eHF == 2) {
                    //Carry on, all good
                    populateTable(ps.homeDir() + File.separator + "AppWatch");
                }
            }
        } 
        jLabel2.setText(ps.homeDir() + File.separator + "AppWatch");
    }
    /**
     * 
     * @param file the Hash File 
     * @return A number indicating which of 3 outcomes occurred
     * [0 = Try Password Again, 1 = Delete all old files, 2 = Success]
     */
    public Integer existingHashFile(String file) {
        psUI = new PasswordUI(new javax.swing.JFrame(), true, "existing");
        psUI.setVisible(true);
        this.key = PasswordUI.key;
        try {
            //decryptOK = hash.decryptHashFile(file, this.key);
            hash.decryptHashFile(file, this.key);
            System.out.println("Hash File decrypt successful");
            return 2;
        } catch (EncryptionManager.InvalidPasswordException ex) {
            System.out.println("Incorrect password!");
            //Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            /*then the file was not decrypted - the user can either try to enter
            ** the password again, or start fresh with a new Hash File (this will
            ** invalidate all previous reports) */
            int n = queryDelete();
            System.out.println("User response choice: " + n);
            return n;
        } catch (Exception ex) {
            System.out.println("Decryption error!");
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);            
            int n = queryDelete();
            System.out.println("[Exception] return " + n);
            return n;
        }
    }
    
    /**
     * if the user chooses to delete all files, this method is called to 
     * perform that action, then close the window.
     */
    public void deleteAllFiles() {
        File folder;
        folder = new File(dir);
        File[] listOfFiles = folder.listFiles();
        boolean deleteSuccess = true;
        for (File delFile : listOfFiles) {
            if (delFile.isFile()) {
                //File toDel = new File(delFile);
                if (delFile.delete() == false) {
                    deleteSuccess = false;
                } 
            }                    
        }
        if (deleteSuccess == true) {
            JOptionPane.showMessageDialog(null, "Control File and all previous reports successfully deleted.");
        } else {
            JOptionPane.showMessageDialog(null, "Could not delete all files. Open the Appwatch directory and manually delete");
        }
        dispose();
    }
    
    /**
     * If an incorrect password is supplied, then this method is called to 
     * prompt the user to try again or delete all files (in case password is 
     * forgotten)
     * @return 
     */
    private Integer queryDelete() {
        Object[] buttonOptions = {"Try again", "Create new"};
        int n = JOptionPane.showOptionDialog(null, "I was unable to decrypt the Control File with the supplied password." + (char) 10 + 
                "It assures your report integrity, therefore I cannot verify the integrity of the existing reports." + (char) 10 +
                "Try again or create a new Control File?"
                , "WARNING!", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,     //do not use a custom Icon
                buttonOptions,  //the titles of buttons
                buttonOptions[0]);
        
        return n;
    }
    
    /** 
     * When the table is double-clicked, open the report at the mouse cursor.
     * Before opening the report, we must first validate it's integrity by 
     * comparing it's MD5 hash value to that stored in the Hash List.
    */
    private void reportTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportTableMouseClicked
        String report_ID;
        String hashVal;
        
        if (evt.getClickCount() == 2) {
            Object o = reportTable.getModel().getValueAt(reportTable.getSelectedRow(), 2);
            report_ID = o.toString();
            filename = ps.homeDir() + File.separator + "AppWatch" + File.separator + report_ID + ".xml";
            File xml = new File(filename);
            if (report_ID.equals("")) {
                // a row without a Report ID value has been clicked, can't do anything
                jStatusLabel.setText("Invalid selection");
            } else {
                try {
                    //we have a report ID, now we must open and display the report contents
                    //Verify the MD5 Hash value of the report
                    hashVal = rep.getHash(xml);
                    System.out.println("hashVal = " + hashVal);
                    if (hashVal != null) {
                        boolean validated = rep.validateHash(rep.getUNIDFromFile(filename), hashVal);
                        if (validated == true) {
                            //MD5 hash values match, so the report integrity is valid
                            rep.openReport(report_ID);
                        } else {
                            //This report has been edited outside of AppWatch since
                            //it was last edited by the application.  We cannot trust it.
                            JOptionPane.showMessageDialog(null, "It looks like this report has been modified"
                            + " since AppWatch last saved it.  It should no longer be trusted"
                                    , "WARNING!", JOptionPane.WARNING_MESSAGE);
                            rep.insertXML("Suspicious", "report_Stage", filename);
                            populateTable(dir);
            }
                    } 
                } catch (ParserConfigurationException | IOException | NoSuchAlgorithmException | SAXException ex) {
                    Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            jStatusLabel.setText("Row " + reportTable.getSelectedRow() + " selected");
        }
    }//GEN-LAST:event_reportTableMouseClicked

    /**
     * When closing the application we need to encrypt the Hash List and then delete
    *  the unencrypted file.  This ensures that only AppWatch can edit the Hash List
    *  and that it cannot be altered by external actors.
    */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //protect the hash list from modification whilst AppWatch is closed
        filename = ps.getAppDir() + "hashlist.xml";
        System.out.println("closing, filename = " + filename);
        try {
            hash.encryptHashFile(filename, this.key);
            File delFile = new File(filename);
            System.out.println("deleting " + delFile.getName());
            delFile.delete();
        } catch (Exception ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        /*
        * The button executes a new scan for locally installed applications.
        * As the scan results are written to the default application directory
        * we must first ensure that the directory exists.  
        * If it does not, then it will be created.
        * Only if the default application directory exists will the scan be
        * initiated.
        */
        boolean dirFound;
        boolean dirMade = true;
        String md5Hash;
        String rID;
        File report;
        ps = new PowerShellClass();
        rep = new ReportClass();
        //check to see if the default application directory exists
        dirFound = ps.dirSearch();
       
        if (dirFound == false) {
            try {
                // cannot locate the directory, attempt to create it
                PowerShellClass.dirMake(ps.homeDir());
            }
            catch (IOException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex); 
                dirMade = false;
            }
        } else {
            jStatusLabel.setText("Found " + ps.homeDir() + File.separator + "AppWatch");
        }
        /* the dirMade variable is true, unless the attempt to create the default
        *  directory has failed.  This means that the application scan cannot be
        *  initiated unless the directory exists
        */
        if (dirMade) {
            jStatusLabel.setText("Scanning for installed applications...");
            try {
                /* Call powershell to perform the search.  Once complete
                ** insert a unique identifer for each found application into the
                ** XML file. Then grab the XML file's MD5 hash value so we can
                ** store it in the Hash List.
                ** Finally, add the report to the table.
                */
                filename = ps.appSearch(); 
                if (filename.equals("Error detected during scan")) {
                    throw new IOException("Error during PowerShell scan.");   
                }
                //delete any empty nodes (i.e. application is blank)
                rep.deleteBlankNodes(filename);
                //now add a sequential UNID to each remaining node
                rep.addAppUNIDS(filename);
                report = new File(filename);       
                //retrieve the MD5 hash value of the report
                md5Hash = rep.getHash(report);
                //retrieve the UNID of the report
                rID = rep.getUNIDFromFile(filename);
                //Update the Hash List with the report UNID, for future reference
                hash.setHash(rID, md5Hash);
                jStatusLabel.setText("Scan complete. Report ID: " + rID);
                //update the table to show the new report
                populateTable(ps.homeDir() + File.separator + "AppWatch");
            }
            // if the appSearch method throws any exception, return a general error
            catch (IOException | SAXException | NoSuchAlgorithmException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);     
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * When we close child windows and return to HomePage, refresh the table
     * contents in case changes have been made to reports
     * @param evt trigger for table refresh
     */
    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        populateTable(ps.homeDir() + File.separator + "AppWatch");
    }//GEN-LAST:event_formFocusGained

    /**
     * Quit the application
     * @param evt trigger
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    private void delButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delButtonMouseClicked
        
        if (reportTable.getSelectedRow() > -1) {
            Object o = reportTable.getModel().getValueAt(reportTable.getSelectedRow(), 2);
            String report_ID = o.toString();
            filename = dir + report_ID + ".xml";
            File delFile = new File(filename);
            delFile.delete();
            populateTable(dir);
        } else {
            jStatusLabel.setText("No row selected");
        }   
    }//GEN-LAST:event_delButtonMouseClicked

    /**
     * Populate the table with a list of all the reports found in the 
     * AppWatch directory.
     * @param dir the application directory in which to find reports
     * source: https://stackoverflow.com/questions/5924237/java-read-all-txt-files-in-folder
     */
    private void populateTable (String dir) {
        File folder;
        folder = new File(dir);
        File[] listOfFiles = folder.listFiles();
        String rID;
        String rStage;
        String scanType;
        String numApps;
        String numVul;
        Long lastMod;
        Date rDt;
        
        rep = new ReportClass();
        model = (DefaultTableModel) reportTable.getModel();
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        model.setRowCount(0);

        for (File report : listOfFiles) {
            if (report.isFile() && report.getName().endsWith(".xml") & !report.getName().equalsIgnoreCase("hashlist.xml")) {
                try {
                    //read the report ID, report Stage and populate the table
                    rID = rep.readReport(report, "report_ID");
                    rStage = rep.readReport(report, "report_Stage");
                    scanType = rep.readReport(report, "scan_Type");
                    numApps = rep.readReport(report, "app_Count");
                    numVul = rep.readReport(report, "vul_Count");
                    lastMod = report.lastModified();
                    rDt = new Date(lastMod);
                    
                    Object[] row = {rStage, rDt, rID, numApps, scanType, numVul};
                    
                    model.addRow(row);
                } catch (SAXException | IOException ex) {
                    Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex); 
                }                 
            } 
        }
        
        /* Now the table contains data, we format it in terms of column widths
        ** and alignments */
        TableColumn column;
        TableColumnModel tcm = reportTable.getColumnModel();
        column = tcm.getColumn(2);
        if (column.getHeaderValue().equals("Report ID")) {
            //then this is a brand new panel and therefore columns must be
            //adjusted
            tcm.removeColumn(column);
            for (int i = 0; i < 5; i++) {
                column = tcm.getColumn(i);
                switch (i) {
                    case 0:
                        column.setMinWidth(120);
                        break;
                    case 1:
                        column.setMinWidth(200);
                        break;
                    case 3:
                        column.setMinWidth(100);
                        break;
                    default:
                        column.setMinWidth(60);                    
                        tcr.setHorizontalAlignment(JLabel.CENTER);
                        column.setCellRenderer(tcr);
                        break;
                }
            }   
        }        
        
        DefaultTableCellRenderer leftAlign = new DefaultTableCellRenderer();
        leftAlign.setHorizontalAlignment(SwingConstants.LEFT);
        reportTable.getColumnModel().getColumn(1).setCellRenderer(leftAlign);
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(reportTable.getModel());
        reportTable.setRowSorter(sorter);

        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            HomePage dialog = new HomePage(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jStatusLabel;
    private javax.swing.JTable reportTable;
    // End of variables declaration//GEN-END:variables
}
